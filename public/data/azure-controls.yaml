---
controls:
  # Chapter 2
  - name: 2_02_azure_subscription_role_overly_permissive
    description: 2.2 - Azure Subscriptions with custom roles should not be overly permissive
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureRoleDefinition with IsBuiltInRole = false and not DefinitionId = ("d54218c0-97a8-5da8-a483-66a7f7adede9" or "c702c0ca-1bd9-4353-9f91-6ec883b6ee6d" or "0b1d2aa3-cbdf-55b8-ad7a-8be9238ff18c" or "7e9ba4f8-bf8f-4e5d-af02-edc63dc1e801" or "41460f83-da15-4fcb-bf6c-921700d4f3be" or "2e8dfdfb-bf5e-4333-9a94-f4af2bcf4dd5" or "1545804c-a7eb-46dd-9061-900047f8d26e") and ((PermissionsAction [ * ] like "*" and not PermissionsAction [ * ] like ("/*" or "*/read")) or ('/' in AssignableScopes))
    score: 5.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 2_02_subscriptions_roles_overly_permissive
    remediation_steps:  |
      1. Check the usage of the role identified and before deleting, check the impact that may be caused by deleting the role. We can't create, update or delete custom roles through the Azure console.
      2. Log in to the Azure portal.
      3. Use the following Azure CLI command to delete the role: az role definition delete --name \""rolename\""
    terraform_remediation: |
      resource "azurerm_role_definition" "example_role_definition" {
       ...
       permissions {
         actions     = <limited list of actions>
       }
       assignable_scopes = <limited list of scopes>
      }
  # Chapter 3
  - name: 3_02_azure_storage_account_queues_logging
    description: 3.2 - Azure Storage account queues logging must be enabled
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: |
      [AzureStorageAccount without (Tags['application']="databricks" or Tags['databricks-environment']="true")] with (AzureInventory.DiagnosticSettings with (DiagnosticSettingType="StorageQueue" and (Logs.StorageRead.enabled ilike 'false' or Logs.StorageWrite.enabled ilike 'false' or Logs.StorageDelete.enabled ilike 'false')))
    score: 8.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 3_02_storage_account_queues_logging
  - name: 3_02_azure_storage_account_blobs_logging
    description: 3.2 - Azure Storage account blobs logging must be enabled
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: |
      [AzureStorageAccount without (Tags['application']="databricks" or Tags['databricks-environment']="true")] with (AzureInventory.DiagnosticSettings with (DiagnosticSettingType="BlobStorage" and (Logs.StorageRead.enabled ilike 'false' or Logs.StorageWrite.enabled ilike 'false' or Logs.StorageDelete.enabled ilike 'false')))
    score: 8.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 3_02_storage_account_blobs_logging
  - name: 3_02_azure_storage_account_tables_logging
    description: 3.2 - Azure Storage account tables logging must be enabled
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: |
      [AzureStorageAccount without (Tags['application']="databricks" or Tags['databricks-environment']="true")] with (AzureInventory.DiagnosticSettings with (DiagnosticSettingType="StorageTable" and (Logs.StorageRead.enabled ilike 'false' or Logs.StorageWrite.enabled ilike 'false' or Logs.StorageDelete.enabled ilike 'false')))
    score: 8.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 3_02_storage_account_tables_logging
  - name: 3_03_azure_sql_auditing
    description: 3.3 - Azure SQL auditing must be enabled
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureSqlDatabase without AuditPolicy.State ilike "enabled" or Server.AuditPolicies.State ilike "enabled"
    score: 8.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 3_03_sql_auditing_enablement
    remediation_steps:  |
      1. Log in to your Azure Subscription, in which the alert exists.
      2. In the search bar search for SQL servers/databases > click on the resource, for which there is an alert.
      3. On left hand side under Security heading, click Auditing > Set the Enable Azure SQL Auditing parameter.
      4. Click "Save" to enable auditing for the Azure SQL Database.
    terraform_remediation:  |
      resource "azurerm_mssql_database_extended_auditing_policy" "example_auditing_policy" {
        database_id                             = <your database id>
        storage_endpoint                        = <your storage account endpoint>
        storage_account_access_key              = <your storage account access key>
        ...
      }
      resource "azurerm_mssql_server_extended_auditing_policy" "example_server_auditing_policy" {
        server_id                  = <your server id>
        storage_endpoint           = <your storage account endpoint>
        storage_account_access_key = <your storage account access key>
      }
  - name: 3_03_azure_sql_auditing_retention
    description: 3.3 - Azure SQL auditing retention must be enabled for at least 180 days
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureSqlDatabase without Name = "master" or AuditPolicy . RetentionDays >= 180 or Server . AuditPolicies . RetentionDays >= 180
    score: 8.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 3_03_sql_auditing_retention
    remediation_steps:  |
      1. Log into your Azure Subscription, in which the alert exists
      2. In the search bar search for SQL servers > click on the resource, for which there is an alert.
      3. On left hand side under Security heading, click Auditing > click on Advanced properties under Storage > Set Retention days to greater than or equal to 180 days.
      4. Save the changes.    
    terraform_remediation:  |
      resource "azurerm_mssql_server_extended_auditing_policy" "example_server_auditing_policy" {
        ...
        retention_in_days = <180 or more>
        }
      resource "azurerm_mssql_database_extended_auditing_policy" "example_auditing_policy" {
        ...
        retention_in_days = <180 or more>
      }
  - name: 3_03_azure_sql_threat_detection
    description: 3.3 - Azure SQL Threat Detection should be enabled
    sgs_wiki_link: https://wiki.one.int.sap/wiki/x/Ckc3c
    query: AzureSqlDbServer without SecurityAlertPolicies.State ilike "enabled"
    score: 5.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 3_03_sql_threat_detection_enablement_misconfigured
    remediation_steps:  |
      1. Log in to the Azure portal.
      2. Click SQL Servers > select the SQL Server you need to change.
      3. In the left panel under Security -> Click Microsoft Defender for Cloud.
      4. Click “Enable Microsoft Defender for SQL” button
    terraform_remediation:  |
      resource "azurerm_mssql_server_security_alert_policy" "example_server_alert" {
        state                      = 'Enabled'
        ...
      }
  - name: 3_03_azure_postgres_server_log_checkpoints
    description: 3.3 - Azure PostgreSQL database servers with log checkpoints parameter should be enabled
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzurePostgresDbServer without Configurations.log_checkpoints
    score: 5.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 3_03_postgres_server_log_checkpoints
    remediation_steps:  |
      1. Log in to your Azure Subscription, in which the alert exists.
      2. In the search bar search for Azure Database for PostgreSQL servers > click on the resource, for which there is an alert.
      3. Navigate to Server parameters, which you will see on the left hand side.
      4. Locate log_checkpoints > click On.
      5. Click on the "Save" button to apply the changes.
    terraform_remediation:  |
      resource "azurerm_postgresql_configuration" "example_postgreserver_config" {
        ...
        name                = 'log_checkpoints'
        value               = 'on'
      }
  - name: 3_03_azure_postgres_server_log_connections
    description: 3.3 - Azure PostgreSQL database servers with log connections parameter should be enabled
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzurePostgresDbServer without Configurations.log_connections
    score: 5.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 3_03_postgres_server_log_connections
    remediation_steps:  |
      1. Log in to your Azure Subscription, in which the alert exists.
      2. In the search bar search for Azure Database for PostgreSQL servers > click on the resource for which there is an alert.
      3. Navigate to Server parameters, which you will see on the left hand side.
      4. Locate log_connections > click On.
      5. Click on "Save" to apply the changes.
    terraform_remediation:  |
      resource "azurerm_postgresql_configuration" "example_postgreserver_config" {
        ...
        name                = 'log_connections'
        value               = 'on'
      }
  - name: 3_03_azure_postgres_server_log_disconnections
    description: 3.3 - Azure PostgreSQL database servers with log disconnections parameter should be enabled
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzurePostgresDbServer without Configurations.log_disconnections
    score: 5.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 3_03_postgres_server_log_disconnections
    remediation_steps:  |
      1. Log in to your Azure Subscription, in which the alert exists.
      2. In the search bar search for Azure Database for PostgreSQL servers > click on the resource, for which there is an alert.
      3. Navigate to Server parameters, which you will see on the left hand side.
      4. Locate log_disconnections > click On.
      5. Save the changes.
    terraform_remediation:  |
      resource "azurerm_postgresql_configuration" "example_postgreserver_config" {
        ...
        name                = 'log_disconnections'
        value               = 'on'
      }
  - name: 3_03_azure_postgres_server_log_duration
    description: 3.3 - Azure PostgreSQL database servers with log duration parameter should be enabled
    sgs_wiki_link: https://wiki.one.int.sap/wiki/x/Ckc3c
    query: AzurePostgresDbServer without Configurations.log_duration
    score: 5.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 3_03_postgres_server_log_duration
    remediation_steps:  |
      1. Log in to your Azure Subscription, in which the alert exists.
      2. In the search bar search for Azure Database for PostgreSQL servers > click on the resource, for which there is an alert.
      3. Navigate to Server parameters, which you will see on the left hand side.
      4. Locate log_duration > click On.
      5. Save the changes.
    terraform_remediation:  |
      resource "azurerm_postgresql_configuration" "example_postgreserver_config" {
        ...
        name                = 'log_duration'
        value               = 'on'
      }
  - name: 3_04_azure_key_vault_audit_logging
    description: 3.4 - Azure Key Vaults audit logging must be enabled
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureKeyVault.DiagnosticSettings with (not Logs.AuditEvent or not StorageAccount)
    score: 8.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 3_04_key_vault_logging
    remediation_steps:  |
      1. Log in to the Azure portal.
      2. Click on Resources > find or search for the resource in question.
      3. Click on the name of key vault you want to modify > click Diagnostic settings > click Add diagnostic setting.
      4. Enter a name for the log > Click Archive to a storage account > select the relevant storage account to save the logs to.
      5. Under Log, select AuditEvent > set the Retention time frame.
      6. Save the changes.
    terraform_remediation:  |
      resource "azurerm_monitor_diagnostic_setting" "example_keyvault_log" {
        ...
        target_resource_id = <your key vault id>
          log {
            category = "AuditEvent"
            enabled  = true
        ...
        }
        metric {
          category = "AllMetrics"
          enabled  = true
          ...
        }
      }
  # Chapter 4
  - name: 4_01_azure_vm_encryption
    description: 4.1 - Azure VMs must use encrypted protocols
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureComputeVm with ApplicationConfigurationFiles with Misconfiguration.is_data_encrypted = 'false'
    score: 8.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: null
    remediation_steps:  |
      To use and encrypted protocol for your VM, you need to enable Azure Disk Encryption for your VM disks.
      1. Log in to the Azure portal.
      2. Navigate to the virtual machine that triggered the alert 
      3. Click on "Disks" in the left-hand menu.
      4. Select the OS disk of the virtual machine.
      5. Click on "Disk encryption" in the top menu.
      6. Enable encryption for the disk.
      7. Click on "Save" to apply the changes.
    terraform_remediation:  |
      resource "azurerm_disk_encryption_set" "example" {
        name = "my-disk-encryption-set"
        key_vault_key_id = "https://mykeyvault.vault.azure.net/keys/my-key/versions/my-key-version"
      }

      resource "azurerm_virtual_machine" "example" {
      ...
        os_disk {
        ... Disk configuration ...
        }
        disk_encryption_set_id = azurerm_disk_encryption_set.example.id
        }
        ... other VM configuration ...
      }
  - name: 4_01_azure_sql_database_encryption
    description: 4.1 - Azure SQL databases must have Transparent Data Encryption enabled
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureSqlDatabase without TransparentDataEncryptionStatus = "Enabled"
    score: 8.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 4_01_sql_database_encryption_enabled
    remediation_steps:  |
      1. Log in to your Azure Subscription in which the alert exists.
      2. In the search bar search for ‘SQL databases’ > click on the resource, for which there is an alert.
      3. On left hand side, under Security heading > click Transparent data encryption > switch Data encryption to ON.
      4. Click "Save" to apply the changes.
    terraform_remediation:  |
      Add the azurerm_sql_database_transparent_data_encryption resource block to the Terraform configuration file.
        resource "azurerm_sql_database_transparent_data_encryption" "example" {
          name                = "dsqlp1"
          resource_group_name = "RESOURCE_GROUP_NAME"
          server_name         = "SERVER_NAME"
          status              = "Enabled"
        }
  - name: 4_01_azure_postgresql_ssl_enforcement
    description: 4.1 - Azure PostgreSQL database servers should have SSL connection enabled
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzurePostgresDbServer without SslEnforcement = "Enabled"
    score: 5.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 4_01_postgres_server_ssl
    remediation_steps:  |
      1. Log in to your Azure Subscription in which the alert exists.
      2. In the search bar search for Azure Database for PostgreSQL servers > click on the resource, for which there is an alert.
      3. Under the Settings, on left hand side, click on Connection security > Under SSL settings, set value for Enforce SSL connection to ENABLED.
      4. Click "Save" to apply the changes.
    terraform_remediation:  |
      resource "azurerm_postgresql_server" "example_postresql_server" {
        ...
        ssl_enforcement_enabled = true
      }
  - name: 4_02_azure_ip_forwarding
    description: 4.2 - Azure IP Forwarding should not be enabled
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureComputeVm with NetworkInterfaces with EnabledIpForwarding and AzureState and not StopDate
    score: 1.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: null
    remediation_steps:  |
      1. Log in to the Azure portal.
      2. Navigate to the virtual machine that triggered the alert
      3. Disable IP forwarding for the virtual machine by running the following command in the Azure CLI: az network nic update --name <NIC_NAME> --resource-group <RESOURCE_GROUP_NAME> --ip-forwarding false
        (Replace <NIC_NAME> with the name of the network interface associated with the virtual machine and <RESOURCE_GROUP_NAME> with the name of the resource group that contains the virtual machine.) 
      4. Verify that IP forwarding has been disabled by running the following command in the Azure CLI: az network nic show --name <NIC_NAME> --resource-group <RESOURCE_GROUP_NAME> --query "ipConfigurations[].enableIpForwarding"
      5. The output should be false.
    terraform_remediation:  |
      resource "azurestack_network_interface" "test" {
        name                = "example-nic"
        location            = azurerm_resource_group.example.location
        resource_group_name = azurerm_resource_group.example.name
        enable_ip_forwarding = false

        ip_configuration {
          ...
        }
       }
  - name: 4_05_azure_vmss_public_ips
    description: 4.5 - Azure Virtual Machine Scale Sets must not have public IP addresses assigned by default
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureComputeVmScaleSets with ComputeVms with PublicIps
    score: 1.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: null
    remediation_steps:  |
      1. Log in to the Azure portal.
      2. Navigate to the virtual machine that triggered the alert
      3. Remove them by running the following command in the Azure CLI: az vmss nic update --resource-group myResourceGroup --vmss-name myScaleSet --instance-id 0 --name niconfig1 --remove ipcConfigurations[0].publicIpAddressConfiguration
    terraform_remediation:  |
      To create a scale set that does not assign a public IP address VMs,set the argument 'assign_public_ip_to_each_vm_in_vmss' to 'false' in ip_configuration.
        resource "azurerm_virtual_machine_scale_set" "example" {
          name                = "example-vmss"
          location            = azurerm_resource_group.example.location
          resource_group_name = azurerm_resource_group.example.name
          upgrade_policy_mode = "Manual"

          sku {            
            name     = "Standard_F2"
            capacity = 2}

          os_profile {
            computer_name_prefix = "example-vmss"
            admin_username       = "myadmin"}

          network_profile {
            name    = "example-vmss-nic"
            primary = true}

          ip_configuration {
            name      = "example-vmss-ipconfig"
            primary   = true
            subnet_id = azurerm_subnet.example.id
          
            public_ip_address_configuration{
            name      = "example-vmss-public-ip"
            idle_timeout   = "30s"
            domain_name_label = "example-DNS"     
            }           

          storage_profile_os_disk {
            name           = "osDiskProfile"
            caching        = "ReadWrite"
            create_option  = "FromImage"
            vhd_containers = ["${azurerm_storage_account.example.primary_blob_endpoint}${azurerm_storage_container.example.name}"]}
        }
  # Chapter 5
  - name: 5_01_azure_vm_image_owner_public_accessibility
    description: 5.1 - Azure VM Images must use SAP owned machine images and they must not be made public
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureComputeVm with ImageOwnerId and ImageIsPublic
    score: 1.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: null
    remediation_steps:  |
      1. SAP MUST use its own Machine Images. These SAP machine images MUST comply to the SAP OS security procedure sand fulfil all legal requirements (e.g., regarding licensing, use of third party software components). 
      2. Because such images contain SAP proprietary configurations and e.g. license keys, they MUST NOT be made publicly available.
    terraform_remediation:  |
      1. Create custom image for SAP using following Terraform Code:
        resource "azurerm_image" "example" {
          name                      = "exampleimage"
          location                  = data.azurerm_virtual_machine.example.location
          resource_group_name       = data.azurerm_virtual_machine.example.name
          source_virtual_machine_id = data.azurerm_virtual_machine.example.id
        }

      2. Deploy the custom image using following Terraform Code:
        resource "azurerm_virtual_machine" "main" {
          name                  = "${var.prefix}-vm"
          location              = azurerm_resource_group.example.location
          resource_group_name   = azurerm_resource_group.example.name
          network_interface_ids = [azurerm_network_interface.main.id]
          vm_size               = "Standard_DS1_v2"

        os_profile { #(Required, when a Linux machine)
          computer_name  = "hostname"
          admin_username = "testadmin"
          admin_password = "Password1234!"  }
      
        os_profile_linux_config { disable_password_authentication = false}

      3. To ensure that image is not public,use the following Terraform Code:
        resource "azurerm_shared_image" "example" {
          name                = "my-image"
          gallery_name        = azurerm_shared_image_gallery.example.name
          resource_group_name = azurerm_resource_group.example.name
          location            = azurerm_resource_group.example.location
          os_type             = "Linux"

          identifier {
            publisher = "PublisherName"
            offer     = "OfferName"
            sku       = "ExampleSku"  }} 
  - name: 5_01_azure_storage_account_blob_public_accessibility
    description: 5.1 - Azure Storage account blob containers must not be publicly accessible
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureBlobStorage with PublicAccess != "None" and StorageAccount.AllowBlobPublicAccess = true and not CloudAccount . AzureStorageAccount with Tags [ 'sec-by-def-public-storage-exception' ] = 'enabled'
    score: 8.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 5_01_public_buckets_not_allowed
    remediation_steps:  |
      1. Log in to your Azure Subscription in which the alert exists.
      2. In the search bar search for Storage accounts > click on the resource, for which there is an alert.
      3. On left hand side, under Settings, click Configuration > Check Allow Blob public access to Disabled.
      4. On left hand side, under Data storage, click Containers > Ensure that the container for which alert is raised the value for Public access level parameter is Private.
      5. Save the changes.
    terraform_remediation:  |
      resource "azurerm_storage_container" "example_container" {
        ...
        container_access_type = "private"
        tags = {
          "sec-by-def-public-storage-exception" = "enabled"
        }
        
      }
  - name: 5_01_azure_snapshots_public_accessibility
    description: 5.1 - Azure snapshots must not be publicly accessible
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureDisk with Snapshots with NetworkAccessPolicy = "AllowAll"
    score: 8.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: null
    remediation_steps:  |
      1. Log in to the Azure portal.
      2. Navigate to the  Azure Disk that triggered the alert
      3. Check the access control settings for the Azure snapshot associated with the Azure Disk.
      4. Ensure that the Azure snapshot is not publicly accessible.
      5. If the Azure snapshot is publicly accessible, update the access control settings to restrict access to authorized users only.
    terraform_remediation:  
      resource "azurerm_snapshot" "example" {
        name                = "example-snapshot"
        location            = "eastus"
        resource_group_name = "example-resource-group"
        source_uri          = "https://example.blob.core.windows.net/vhds/example.vhd"
        disk_size_gb        = 128
        create_option       = "Copy"
        sku_name            = "Standard_LRS"
        public_access_enabled = false }
  - name: 5_02_azure_storage_account_encryption
    description: 5.2 - Azure Storage accounts must be encrypted
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureStorageAccount with Encryption.services.blob.enabled = false and not tags [ 'sec-by-def-encrypt-storage-exception' ] = "enabled"
    score: 8.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 5_02_bucket_encryption_enabled
    remediation_steps:  |
      1. Data, snapshots, and disk I/O MUST be encrypted using the customary AES-256 algorithm.
      2. Azure storage encryption offers a simple encryption solution for data without the need to build, maintain, and secure own key management infrastructure. Storage service encryption protects your data at rest.
      3. Azure Storage encrypts your data as its written in Azure datacenters, and automatically decrypts it for you as you access it.
      4. Every block blob, append blob, or page blob that was written to Azure Storage after October 20, 2017 is encrypted
    terraform_remediation:  |
      resource "azurerm_storage_account" "example" {
        name                     = "storageaccountname"
        resource_group_name      = azurerm_resource_group.example.name
        location                 = azurerm_resource_group.example.location
        account_tier             = "Standard"
        account_replication_type = "GRS"
        enable_blob_encryption   = true
        enable_file_encryption   = true
        minimum_tls_version      = "1.2"
        tags = {
          "sec-by-def-encrypt-storage-exception" = "enabled"
        }
      }
  - name: 5_04_azure_storage_account_object_versioning
    description: 5.4 - Azure Storage accounts object versioning should be enabled
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureStorageAccount without VersioningEnabled = true
    score: 1.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: null
    remediation_steps:  |
      1. Log in to the Azure portal.
      2. Navigate to the Azure Storage Account that triggered the alert
      3. Click on the "Configuration" tab.
      4. Scroll down to the "Object Versioning" section.
      5. Enable object versioning by toggling the switch to "On".
      6. Click "Save" to apply the changes.
    terraform_remediation:  |
      resource "azurerm_storage_account" "example" {
        name                     = "examplestorageaccount"
        resource_group_name      = azurerm_resource_group.example.name
        location                 = azurerm_resource_group.example.location
        account_tier             = "Standard"
        account_replication_type = "LRS"
        versioning_enabled       = true
      }
  # Chapter 6
  - name: 6_01_01_azure_db_ports
    description: 6.1.1 - Azure Network Security Groups must not allow inbound traffic from the Internet to blocklisted Database (DB) ports
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureNetworkSecurityGroup with NetworkSecurityGroupRules with Direction = 'Inbound' and RuleAction = 'Allow' and NetworkSecurityGroupRuleIpPermissions with Protocol in ['tcp', 'udp', '*'] and DestinationPortRange containing [ 5432 , 3306 , 4333 , 1521 , 27017 , 1433 , 1434 ][*] and ( SourceAddressPrefixes [ * ] like [ '/0' , 'Internet' , '*' , 'any' ] [ * ] or SourceAddressPrefixes containing '0.0.0.0' ) and not Tags [ 'sec-by-def-network-exception' ] like [ 'MySQL','PostgreSQL','MSSQL','OracleSQL','MongoDB' ][*]
    score: 8.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 6_01_01_db_ports
    remediation_steps:  |
      1. Log in to your Azure Subscription, in which the alert exists.
      2. In the search bar search for Network security groups > click on the resource, for which there is an alert.
      3. On left hand side, under Settings, click Inbound security rules > find the rule(s) that has any of the DB ports listed under the Port field and Source as Internet > select that rule and change Source of that particular rule, which exposes any of the DB ports to something other than Internet.
      4. Click "Save" to apply the changes.
    terraform_remediation:  |
       resource "azurerm_network_security_rule" "example_security_rule" {
          ...
          direction                   = 'Inbound'
          source_port_range           = <list of required ports>
          source_address_prefix       = <limited list of IPs or VirtualNetwork>
          resource_group_name         = <your resource group>
          network_security_group_name = <your security group>
          tags = {
            "sec-by-def-database-port-exception" = "enabled"
          }
          ...
        }
  - name: 6_01_02_azure_admin_ports
    description: 6.1.2 - Azure Network Security Groups must not allow inbound traffic from the Internet to blocklisted Administrative ports
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureNetworkSecurityGroup with NetworkSecurityGroupRules with Direction = 'Inbound' and RuleAction = 'Allow' and NetworkSecurityGroupRuleIpPermissions with Protocol in ['tcp', 'udp', '*'] and DestinationPortRange containing [ 22 , 135 , 3389 , 5500 , 5900 ][*] and ( SourceAddressPrefixes [ * ] like [ '/0' , 'Internet' , '*' , 'any' ] [ * ] or SourceAddressPrefixes containing '0.0.0.0' ) and not Tags [ 'sec-by-def-network-exception' ] like [ 'SSH' , 'RDP' , 'VNC' , 'RPC' ][*]
    score: 8.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 6_01_02_admin_ports
    remediation_steps:  |
      1. Log in to your Azure Subscription in which the alert exists.
      2. In the search bar, search for Network security groups > click on the resource, for which there is an alert.
      3. On left hand side, under Settings, click Inbound security rules > find the rule(s) that has any of the admin ports listed under Port field and Source as Internet > Select that rule and change Source of that particular rule, which exposes any of the Admin ports to something other than Internet.
      4. Click "Save" to apply the changes.
    terraform_remediation:  |
      resource "azurerm_network_security_rule" "example_security_rule" {
        ...
        direction                   = 'Inbound'
        source_port_range           = <list of required ports>
        source_address_prefix       = <limited list of IPs or VirtualNetwork>
        resource_group_name         = <your resource group>
        network_security_group_name = <your security group>
        tags = {
          "sec-by-def-admin-port-exception" = "enabled"
          }
        ...
      } 
  - name: 6_01_03_azure_infra_ports
    description: 6.1.3 - Azure Network Security Groups should not allow inbound traffic from the Internet to blocklisted Infrastructure ports
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureNetworkSecurityGroup with NetworkSecurityGroupRules with Direction = 'Inbound' and RuleAction = 'Allow' and NetworkSecurityGroupRuleIpPermissions with Protocol in ['tcp', 'udp', '*'] and DestinationPortRange containing [ 53, 110, 25, 67, 68, 161, 162 ][ * ] and ( SourceAddressPrefixes [ * ] like [ '/0' , 'Internet' , '*' , 'any' ] [ * ] or SourceAddressPrefixes containing '0.0.0.0' ) and not Tags [ 'sec-by-def-network-exception' ] like [ 'DNS', 'POP3', 'SMTP', 'DHCP', 'SNMP' ][*]
    score: 5.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 6_01_03_infra_ports
    remediation_steps:  |
      1. Log in to your Azure Subscription in which the alert exists.
      2. In the search bar, search for Network security groups > click on the resource, for which there is an alert.
      3. Navigate to the inbound rules > Click on Edit Inbound rules > Ensure CIDR block 0.0.0.0/0 or ::/0 is not bound to any of the following ports: 53, 110, 25, 67, 68, 161, 162 OR any ports mentioned in [6.1.3 Firewall Rules for Infrastructure ports] SGS hardening guidelines
      4. Click "Save" to apply the changes.
    terraform_remediation:  |
      resource "azurerm_network_security_rule" "example_security_rule" {
        ...
        direction                   = 'Inbound'
        source_port_range           = <list of required ports>
        source_address_prefix       = <limited list of IPs or VirtualNetwork>
        resource_group_name         = <your resource group>
        network_security_group_name = <your security group>
        tags = {
          "sec-by-def-infrastructure-port-exception" = "enabled"
          }
        ...
      }
  - name: 6_01_04_azure_fileshare_ports
    description: 6.1.4 - Azure Network Security Groups should not allow inbound traffic from the Internet to blocklisted File Share ports
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureNetworkSecurityGroup with NetworkSecurityGroupRules with Direction = 'Inbound' and RuleAction = 'Allow' and NetworkSecurityGroupRuleIpPermissions with Protocol in ['tcp', 'udp', '*'] and DestinationPortRange containing [ 21 , 69 , 139 , 445 ][*] and ( SourceAddressPrefixes [ * ] like [ '/0' , 'Internet' , '*' , 'any' ] [ * ] or SourceAddressPrefixes containing '0.0.0.0' ) and not Tags [ 'sec-by-def-network-exception' ] like [ 'NetBIOS','SMB','FTP','TFTP' ][*]
    score: 5.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 6_01_04_fileshare_ports
    remediation_steps:  |
      1. Log in to your Azure Subscription in which the alert exists.
      2. In the search bar search for Network security groups > click on the resource, for which there is an alert.
      3. On left hand side, under Settings, click Inbound security rules > Find the rule(s) that has any of the fileshare ports listed under Port field and Source as Internet > select that rule and change Source of that particular rule, which exposes any of the Fileshare ports to something other than Internet.
      4. Click "Save" to apply the changes.
    terraform_remediation:  |
      resource "azurerm_network_security_rule" "example_security_rule" {
        ...
        direction                   = 'Inbound'
        source_port_range           = <list of required ports>
        source_address_prefix       = <limited list of IPs or VirtualNetwork>
        resource_group_name         = <your resource group>
        network_security_group_name = <your security group>
        tags = {
          "sec-by-def-fileshare-port-exception" = "enabled"
        }
        ...
      }
  - name: 6_01_05_azure_telnet_rsh_ports_ingress
    description: 6.1.5 - Azure Network Security Groups must not allow inbound traffic from the Internet on Telnet or RSH ports
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureNetworkSecurityGroup with NetworkSecurityGroupRules with Direction = 'Inbound' and RuleAction = 'Allow' and NetworkSecurityGroupRuleIpPermissions with DestinationPortRange containing [ 23 , 514 ][*] and ( SourceAddressPrefixes [ * ] like [ '/0' , 'Internet' , '*' , 'any' ] [ * ] or SourceAddressPrefixes containing '0.0.0.0' )
    score: 8.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 6_01_05_telnet_ports
    remediation_steps:  |
      1. Log in to your Azure Subscription in which the alert exists.
      2. In the search bar search for Network security groups > click on the resource, for which there is an alert.
      3. On left hand side, under Settings, click Inbound security rules > find the rule that has Telnet port 23 or 514 listed under Port field.
      4. Remove the rule and save.
    terraform_remediation:  |
      
        terraform import azurerm_network_security_rule.rule1 {resource id}

        terraform destroy -target=azurerm_network_security_rule.rule1
      
  - name: 6_01_05_azure_telnet_rsh_ports_egress
    description: 6.1.5 - Azure Network Security Groups should not allow outbound traffic towards the Internet on Telnet or RSH ports
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureNetworkSecurityGroup with NetworkSecurityGroupRules with Direction = 'Outbound' and RuleAction = 'Allow' and NetworkSecurityGroupRuleIpPermissions with SourcePortRange containing [ 23 , 514 ][*] and ( DestinationAddressPrefixes [ * ] like [ '/0' , 'Internet' , '*' , 'any' ] [ * ] or DestinationAddressPrefixes containing '0.0.0.0' )
    score: 1.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 6_01_05_telnet_ports
    remediation_steps:  |
      1. Log in to your Azure Subscription in which the alert exists.
      2. In the search bar search for Network security groups > click on the resource, for which there is an alert.
      3. On left hand side, under Settings, click Outbound security rules > find the rule that has Telnet port 23 or 514 listed under Port field.
      4. Remove the rule and save.
    terraform_remediation:  |
      
        terraform import azurerm_network_security_rule.rule1 {resource id}

        terraform destroy -target=azurerm_network_security_rule.rule1
      
  - name: 6_03_azure_application_gateway_waf
    description: 6.3 - Azure Application Gateway should have the Web application firewall (WAF) enabled
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureApplicationGateway with ( WebApplicationFirewall and not WebApplicationFirewall.IsEnabled ) or ( IsWafEnabled = false or WebApplicationFirewall.IsEnabled = false )
    score: 5.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 6_03_app_gateway_waf
    remediation_steps:  |
      1. To set the SSL policy using the predefined policy, please run the following command: az network application-gateway ssl-policy set -g --gateway-name -n AppGwSslPolicy20170401S --policy-type Predefined
    terraform_remediation:  |
      resource "azurerm_application_gateway" "example_gateway" {
        ...
        waf_configuration {
          enabled           = true
          firewall_mode     = "Prevention/Detection"
          rule_set_version  = "suitable version"
        ...
        }
      }
  - name: 6_03_azure_application_gateway_tls
    description: 6.3 - Azure Application Gateway must not allow invalid TLS
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureApplicationGateway without MinTLSVersion ilike ( "TLSv1_2" or "TLSv1_3" )
    score: 8.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 6_03_app_gateway_tls
    remediation_steps:  |
      1. To set the SSL policy using the predefined policy, please run the following command: az network application-gateway ssl-policy set -g --gateway-name -n AppGwSslPolicy20170401S --policy-type Predefined
    terraform_remediation:  |
      resource "azurerm_application_gateway" "example_gateway" {
        ...
        ssl_policy {
          # min_protocol_version = "TLSv1_2"
          policy_name = "AppGwSslPolicy20170401S"
          policy_type = "Predefined"
        }
      }
  - name: 6_04_azure_vpn_secure_configuration
    description: 6.4 - Azure VPN default IPSec/IKE policies must not be used
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureVirtualNetworkGatewayConnection with ConnectionProtocol = "IKEv1" or not ConnectionProtocol and ConnectionType = "IPsec"
    score: 8.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 6_04_azure_vpn_secure_configuration
    remediation_steps:  |
    terraform_remediation:  |
      resource "azurerm_virtual_network_gateway_connection" "example_virtual_network_connection" {
        ...
        type = "IPsec"
        connection_protocol = "IKEv2"

        (example configuration, change as per your need)

        ipsec_policy {
          dh_group = "ECP256"
          ike_encryption = "AES256"
          ike_integrity = "SHA256"
          ipsec_encryption = "AES256"
          ipsec_integrity = "SHA256"
          pfs_group = "None"
          sa_lifetime = "28800"
        ...
        }
      }
  - name: 6_04_azure_vpn_dh_group
    description: 6.4 - Azure VPN must be configured with cryptographic algorithm (DH group)
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureVirtualNetworkGatewayConnection without ConnectionType = "ExpressRoute" or IpsecPolicies [*].dh_group = ("ECP256" or "ECP384")
    score: 8.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 6_04_azure_vpn_cryptographic_algorithm
    remediation_steps:  |
      1. Refer to the following link from Microsoft Azure for guidance on how to setup your VPN connections using strong recommended cryptographic conditions: https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-about-compliance-crypto#cryptographic-requirements.
    terraform_remediation:  |
      resource "azurerm_virtual_network_gateway_connection" "example_virtual_network_connection" {
        ...
        (example configuration, change as per your need)

        ipsec_policy {
          dh_group = "ECP256"
          ike_encryption = "AES256"
          ike_integrity = "SHA256"
          ipsec_encryption = "AES256"
          ipsec_integrity = "SHA256"
          pfs_group = "None"
          sa_lifetime = "28800"
        }
      }
  # Chapter 7
  - name: 7_07_azure_kubernetes_service_rbac
    description: 7.7 - Azure Kubernetes Service role-based access control (RBAC) must be enabled
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureAksCluster without IsEnableRBAC
    score: 8.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 7_07_aks_rbac_enabled
    remediation_steps:  |
      1. Log in to your Azure Subscription in which the alert exists.
      2. In the search bar, search for Kubernetes services > click on the resource, for which there is an alert.
      3. Under the Settings heading, on left hand side, click on Cluster configuration > Under Kubernetes authentication and authorization, verify if Role-based access control (RBAC) is set to Enabled. If this setting does not exist, create a new cluster with this updated configuration or use Azure cli to update it in existing cluster.
    terraform_remediation:  |
      resource "azurerm_kubernetes_cluster" "example_aks_cluster" {
        ...
        role_based_access_control {
          enabled = true
        }
      }
  # Chapter 8
  - name: 8_01_azure_cache_redis_support_patches
    description: 8.1 - Azure Caching Software (Redis) must be still supported with security patches (no active use of End of Life versions)
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureCacheForRedis with str_to_version(Version) < str_to_version('6')
    score: 8.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 8_01_caching_redis_and_tls_versioning
    remediation_steps:  |
      1. Log in to your Azure Subscription in which the alert exists.
      2. In the search bar search, for Azure Cache for Redis > click on the resource, for which there is an alert.
      3. Under the Settings heading, on left hand side, click on Advanced settings.
      4. If your cache instance is eligible to be upgraded, you should see a blue banner announcing that your cache can be upgraded to a newer Redis instance. If you click on it, select the button saying yes you want to upgrade. This is not reversible, so ensure that this is thoroughly tested in lower environments where applicable.
      5. Set the minimum TLS version to 1.2 or higher.
      6. Click "Save" to apply the changes.
    terraform_remediation:  |
      resource "azurerm_redis_cache" "example_redis_cache" {
      minimum_tls_version = "1.2" (or a higher version)
      redis_version       = 6 (or a higher version)
      }
  - name: 8_01_azure_cache_redis_network_and_availability
    description: 8.1 - Azure caching services (Redis) should have secure network configurations and redundant setup
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureCacheForRedis with Sku.name = 'Basic' or PublicNetworkAccess = "Enabled" or not SslPort
    score: 5.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 8_01_caching_network_and_availability
    remediation_steps:  |
      1. Log in to your Azure Subscription in which the alert exists.
      2. In the search bar search, for Azure Cache for Redis > click on the resource, for which there is an alert.
      3. Under the Settings heading, on left hand side, click on Advanced settings.
      4. Select Allow access only via SSL and turn Non-SSL port to disabled.
      5. Under the Settings heading, on left hand side, click on Scale. If not set, choose either a standard or premium tier
    terraform_remediation:  |
      resource "azurerm_redis_cache" "example_redis_cache" {
        family              = "C"
        sku_name            = "Standard" or "Premium"
        enable_non_ssl_port = false
        public_network_access_enabled = false
      }
  - name: 8_01_azure_cache_redis_encryption_in_transit
    description: 8.1 - Azure caching services (Redis) must have encryption in-transit (TLS) activated and TLS version must be at least 1.2
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureCacheForRedis without MinimumTlsVersion or MinimumTlsVersion = "1.2"
    score: 8.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: 8_01_caching_redis_and_tls_versioning
    remediation_steps:  |
      1. Log in to your Azure Subscription in which the alert exists.
      2. In the search bar search, for Azure Cache for Redis > click on the resource, for which there is an alert.
      3. Under the Settings heading, on left hand side, click on Advanced settings.
      4. If your cache instance is eligible to be upgraded, you should see a blue banner announcing that your cache can be upgraded to a newer Redis instance. If you click on it, select the button saying yes you want to upgrade. This is not reversible, so ensure that this is thoroughly tested in lower environments where applicable.
      5. Set the minimum TLS version to 1.2 or higher.
      6. Click "Save" to apply the changes.
    terraform_remediation:  |
      resource "azurerm_redis_cache" "example_redis_cache" {
        minimum_tls_version = "1.2" (or a higher version)
        redis_version       = 6 (or a higher version)
      }
  - name: 8_05_azure_frontdoor_access_logging
    description: 8.5 - Azure Front Door should have access logging enabled
    sgs_wiki_link: https://wiki.wdf.sap.corp/wiki/x/Ckc3c
    query: AzureFrontDoor without ( DiagnosticSettings with ( Logs.FrontdoorAccessLog.enabled ) ) or ( DiagnosticSettings with ( Logs.audit.enabled or Logs.allLogs.enabled ) )
    score: 1.0
    allow_orca_score_adjustment: false
    enabled: true
    category: Best practices
    minerva_control_id: null
global_labels:
  - sap_azure
  - sap